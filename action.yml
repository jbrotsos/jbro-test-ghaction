name: "jbro-test"
description: "Run Microsoft Defender CLI (linux x64) on Linux runners."
inputs:
  args:
    description: "Arguments to pass to the Defender CLI (e.g. 'scan --path .')."
    required: false
    default: "--help"
  cli-cache-dir:
    description: "Optional path to cache the downloaded CLI."
    required: false
    default: "${{ github.workspace }}/.cache/jbro-test"
runs:
  using: "composite"
  steps:
    - name: Check runner OS
      shell: bash
      run: |
        if [ "$(uname -s)" != "Linux" ]; then
          echo "This action currently supports Linux runners only because the CLI is linux-x64." >&2
          exit 1
        fi
    - name: Prepare cache
      shell: bash
      run: |
        CACHE_DIR="${{ inputs.cli-cache-dir }}"
        mkdir -p "${CACHE_DIR}"
    - name: Download Defender CLI (cached)
      shell: bash
      run: |
        CACHE_DIR="${{ inputs.cli-cache-dir }}"
        CLI_PATH="${CACHE_DIR}/defender-cli_linux-x64"
        if [ ! -f "$CLI_PATH" ]; then
          echo "Downloading Defender CLI to $CLI_PATH..."
          curl -fsSL -o "$CLI_PATH" "https://aka.ms/defender-cli_linux-x64"
          chmod +x "$CLI_PATH"
        else
          echo "Using cached CLI at $CLI_PATH"
        fi
        echo "CLI_PATH=$CLI_PATH" >> "$GITHUB_ENV"
    - name: Validate required environment variables
      shell: bash
      run: |
        set -euo pipefail
        : "${GDN_MDC_CLI_TENANT_ID:?Required env var GDN_MDC_CLI_TENANT_ID is not set}"
        : "${GDN_MDC_CLI_CLIENT_ID:?Required env var GDN_MDC_CLI_CLIENT_ID is not set}"
        : "${GDN_MDC_CLI_CLIENT_SECRET:?Required env var GDN_MDC_CLI_CLIENT_SECRET is not set}"
    - name: Run Defender CLI
      shell: bash
      run: |
        set -euo pipefail
        if [ -z "${CLI_PATH:-}" ]; then
          CLI_PATH="${{ inputs.cli-cache-dir }}/defender-cli_linux-x64"
        fi
        echo "Invoking CLI: $CLI_PATH ${{ inputs.args }}"
        exec "$CLI_PATH" ${{ inputs.args }}
    - name: Comment on pull request (if applicable)
      shell: bash
      run: |
        set -euo pipefail
        # Only attempt to comment on pull_request events
        if [ "${GITHUB_EVENT_NAME:-}" != "pull_request" ]; then
          echo "Event is not a pull_request (GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME:-}); skipping PR comment"
          exit 0
        fi

        # Extract PR number from the event payload
        if [ -z "${GITHUB_EVENT_PATH:-}" ] || [ ! -f "${GITHUB_EVENT_PATH}" ]; then
          echo "GITHUB_EVENT_PATH is missing or invalid; cannot determine PR number" >&2
          exit 0
        fi

        PR_NUMBER=$(python3 -c "import json,sys
p=json.load(open('${GITHUB_EVENT_PATH}'))
print(p.get('pull_request',{}).get('number',''))")
        if [ -z "$PR_NUMBER" ]; then
          echo "Could not determine pull request number; skipping comment"
          exit 0
        fi

        # Build comment body
        COMMENT_BODY="Defender CLI scan executed by jbro-test (run id: ${GITHUB_RUN_ID:-unknown})."

        # Post comment (use issues API to create PR comment)
        API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/comments"
        echo "Posting comment to $API_URL"
        curl -sS -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github+json" \
          -d "{ \"body\": \"${COMMENT_BODY}\" }" "$API_URL" || echo "Failed to post PR comment"
